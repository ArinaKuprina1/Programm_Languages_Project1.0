Index: basic.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from string_with_arrows import *\n\n###############\n# CONSTANTS\n###############\nDIGITS = '0123456789'\n\n\n###############\n# ERRORS\n###############\n\nclass Error:\n    def __init__(self, pos_start, pos_end, error_name, details):\n        self.pos_start = pos_start\n        self.pos_end = pos_end\n        self.error_name = error_name\n        self.details = details\n\n    def as_string(self):\n        result = f'{self.error_name}: {self.details}'\n        result += f'File {self.pos_start.fname}, line{self.pos_start.line + 1}'\n        result += '\\n\\n' + string_with_arrows(self.pos_start.ftext, self.pos_start, self.pos_end)\n        return result\n\n\nclass IllegalCharacterError(Error):\n    def __init__(self, pos_start, pos_end, details):\n        super().__init__(pos_start, pos_end, 'Illegal Character', details)\n\nclass InvalidSyntaxError(Error):\n        def __init__(self, pos_start, pos_end, details=''):\n                super().__init__(pos_start, pos_end, 'Invalid Syntax', details)\n\nclass RTError(Error):\n    def __init__(self, pos_start, pos_end, details, context):\n        super().__init__(pos_start, pos_end, 'Runtime Error', details)\n        self.context = context\n\n    def as_string(self):\n        result  = self.generate_traceback()\n        result += f'{self.error_name}: {self.details}'\n        result += '\\n\\n' + string_with_arrows(self.pos_start.ftext, self.pos_start, self.pos_end)\n        return result\n\n    def generate_traceback(self):\n        result = ''\n        pos = self.pos_start\n        ctx = self.context\n\n        while ctx:\n            result = f'  File {pos.fname}, line {str(pos.line + 1)}, in {ctx.display_name}\\n' + result\n            pos = ctx.parent_entry_pos\n            ctx = ctx.parent\n\n        return 'Traceback (most recent call last):\\n' + result\n\n\n###############\n# POSITION\n###############\nclass Position:\n    def __init__(self, index, line, column, fname, ftext):\n        self.index = index\n        self.line = line\n        self.column = column\n        self.fname = fname\n        self.ftext = ftext\n\n    def advance(self, current_char = None):\n        self.index += 1\n        self.column += 1\n\n        if current_char == '\\n':\n            self.line += 1\n            self.column += 0\n\n        return self\n\n    def copy(self):\n        return Position(self.index, self.line, self.column, self.fname, self.ftext)\n\n\n###############\n# TOKENS\n###############\n\nTT_INT = 'INT'\nTT_FLOAT = 'FLOAT'\nTT_PLUS = 'PLUS'\nTT_MINUS = 'MINUS'\nTT_MUL = 'MUL'\nTT_DIV = 'DIV'\nTT_LPAREN = 'LPAREN'\nTT_RPAREN = 'RPAREN'\nTT_TRUE = 'TRUE'\nTT_FALSE = 'FALSE'\nTT_MODULO = 'MODULO'\nTT_AND = 'AND'\nTT_OR = 'OR'\nTT_NOT = 'NOT'\nTT_EQ = 'EQ'\nTT_NEQ = 'NEQ'\nTT_LT = 'LT'\nTT_GT = 'GT'\nTT_LTE = 'LTE'\nTT_GTE = 'GTE'\nTT_DEF = 'DEF'\nTT_LAMBDA = 'LAMBDA'\nTT_LBRACE = '{'\nTT_RBRACE = '}'\nTT_LBRACKET = '['\nTT_RBRACKET = ']'\nTT_EOF = 'EOF'\n\n# class Token:\n#     def __init__(self, type_, value=None, pos_start=None, pos_end=None):\n#         self.type = type_\n#         self.value = value\n#         if pos_start:\n#             self.pos_start = pos_start.copy()\n#             self.pos_end = pos_start.copy()\n#             self.pos_end.advance()\n#         if pos_end:\n#             self.pos_end = pos_end\n#\n# class Token:\n#     def __init__(self, type_, value=None, pos_start=None, pos_end=None):\n#         self.type = type_\n#         self.value = value\n#         if pos_start:\n#             self.pos_start = pos_start.copy()\n#             self.pos_end = pos_start.copy()\n#             self.pos_end.advance()\n#         if pos_end:\n#             self.pos_end = pos_end\n#\n#\n#     def __repr__(self):\n#         if self.value: return f'{self.type}: {self.value}'\n#         return f'{self.type}'\nclass Token:\n    def __init__(self, type_, value=None, pos_start=None, pos_end=None):\n        self.type = type_\n        self.value = value\n        self.pos_start = pos_start.copy() if pos_start else None\n        self.pos_end = pos_end.copy() if pos_end else pos_start.copy().advance() if pos_start else None\n\n    def __repr__(self):\n        if self.value:\n            return f'{self.type}: {self.value}'\n        return f'{self.type}'\n\n###############\n# LEXER\n###############\n\n\nclass Lexer:\n    def __init__(self, fn, text):\n        self.fn = fn\n        self.text = text\n        self.pos = Position(-1, 0, 0, fn, text)\n        self.current_char = None\n        self.advance()\n\n    def advance(self):\n        self.pos.advance(self.current_char)\n        self.current_char = self.text[self.pos.index] if self.pos.index < len(self.text) else None\n\n    def skip_whitespace(self):\n        while self.current_char is not None and self.current_char in ' \\t':\n            self.advance()\n\n    def skip_comment(self):\n        while self.current_char is not None and self.current_char != '\\n':\n            self.advance()\n\n    def handle_multiline_comment(self):\n        self.advance()  # Skip the first '*'\n        while self.current_char is not None:\n            if self.current_char == '*':\n                self.advance()\n                if self.current_char == '/':\n                    self.advance()\n                    return [], None\n            else:\n                self.advance()\n        # Error handling if no end of multiline comment found\n        pos_start = self.pos.copy()\n        return [], IllegalCharacterError(pos_start, self.pos, \"Unterminated multiline comment\")\n\n    def make_token(self):\n        tokens = []\n        while self.current_char is not None:\n            if self.current_char in ' \\t':\n                self.advance()\n            elif self.current_char == '#':\n                self.advance()\n                self.skip_comment()\n            elif self.current_char == '/':\n                self.advance()\n                if self.current_char == '/':\n                    self.advance()\n                    self.skip_comment()\n                elif self.current_char == '*':\n                    self.advance()\n                    result, error = self.handle_multiline_comment()\n                    if error:\n                        return [], error\n                    tokens.extend(result)\n                else:\n                    tokens.append(Token(TT_DIV, pos_start=self.pos))\n            elif self.current_char == '\"':\n                tokens.append(self.make_string())\n            elif self.current_char.isalpha() or self.current_char == '_':\n                token, error = self.make_identifier()\n                if error:\n                    return [], error\n                tokens.append(token)\n            elif self.current_char in DIGITS:\n                tokens.append(self.make_number())\n            elif self.current_char == '+':\n                tokens.append(Token(TT_PLUS, pos_start=self.pos))\n                self.advance()\n            elif self.current_char == '-':\n                tokens.append(Token(TT_MINUS, pos_start=self.pos))\n                self.advance()\n            elif self.current_char == '*':\n                tokens.append(Token(TT_MUL, pos_start=self.pos))\n                self.advance()\n            elif self.current_char == '%':\n                tokens.append(Token(TT_MODULO, pos_start=self.pos))\n                self.advance()\n            elif self.current_char == '(':\n                tokens.append(Token(TT_LPAREN, pos_start=self.pos))\n                self.advance()\n            elif self.current_char == ')':\n                tokens.append(Token(TT_RPAREN, pos_start=self.pos))\n                self.advance()\n            elif self.current_char == '{':\n                tokens.append(Token(TT_LBRACE, pos_start=self.pos))\n                self.advance()\n            elif self.current_char == '}':\n                tokens.append(Token(TT_RBRACE, pos_start=self.pos))\n                self.advance()\n            elif self.current_char == '[':\n                tokens.append(Token(TT_LBRACKET, pos_start=self.pos))\n                self.advance()\n            elif self.current_char == ']':\n                tokens.append(Token(TT_RBRACKET, pos_start=self.pos))\n                self.advance()\n            elif self.current_char == '&':\n                self.advance()\n                if self.current_char == '&':\n                    tokens.append(Token(TT_AND, pos_start=self.pos))\n                    self.advance()\n                else:\n                    pos_start = self.pos.copy()\n                    char = '&'\n                    self.advance()\n                    return [], IllegalCharacterError(pos_start, self.pos, f\"Unexpected character '{char}'\")\n            elif self.current_char == '|':\n                self.advance()\n                if self.current_char == '|':\n                    tokens.append(Token(TT_OR, pos_start=self.pos))\n                    self.advance()\n                else:\n                    pos_start = self.pos.copy()\n                    char = '|'\n                    self.advance()\n                    return [], IllegalCharacterError(pos_start, self.pos, f\"Unexpected character '{char}'\")\n            elif self.current_char == '!':\n                self.advance()\n                if self.current_char == '=':\n                    tokens.append(Token(TT_NEQ, pos_start=self.pos))\n                    self.advance()\n                else:\n                    tokens.append(Token(TT_NOT, pos_start=self.pos))\n            elif self.current_char == '=':\n                self.advance()\n                if self.current_char == '=':\n                    tokens.append(Token(TT_EQ, pos_start=self.pos))\n                    self.advance()\n                else:\n                    pos_start = self.pos.copy()\n                    char = '='\n                    self.advance()\n                    return [], IllegalCharacterError(pos_start, self.pos, f\"Unexpected character '{char}'\")\n            elif self.current_char == '>':\n                self.advance()\n                if self.current_char == '=':\n                    tokens.append(Token(TT_GTE, pos_start=self.pos))\n                    self.advance()\n                else:\n                    tokens.append(Token(TT_GT, pos_start=self.pos))\n            elif self.current_char == '<':\n                self.advance()\n                if self.current_char == '=':\n                    tokens.append(Token(TT_LTE, pos_start=self.pos))\n                    self.advance()\n                else:\n                    tokens.append(Token(TT_LT, pos_start=self.pos))\n            elif self.current_char == '\\\\':\n                pos_start = self.pos.copy()\n                self.advance()\n                if self.current_char in ['\"', '\\\\']:\n                    tokens.append(Token('STRING', self.current_char))  # Add escaped characters\n                    self.advance()\n                else:\n                    return [], IllegalCharacterError(pos_start, self.pos,\n                                                     f\"Unexpected character '\\\\{self.current_char}'\")\n            else:\n                pos_start = self.pos.copy()\n                char = self.current_char\n                self.advance()\n                return [], IllegalCharacterError(pos_start, self.pos, f\"Unexpected character '{char}'\")\n\n        tokens.append(Token(TT_EOF, pos_start=self.pos))\n        return tokens, None\n\n    def make_identifier(self):\n        id_str = ''\n        while self.current_char is not None and (self.current_char.isalnum() or self.current_char == '_'):\n            id_str += self.current_char\n            self.advance()\n\n        if id_str.lower() == 'true':\n            return Token(TT_TRUE,pos_start=self.pos), None\n        elif id_str.lower() == 'false':\n            return Token(TT_FALSE,pos_start=self.pos), None\n        elif id_str == 'def':\n            return Token(TT_DEF,pos_start=self.pos), None\n        elif id_str == 'lambda':\n            return Token(TT_LAMBDA,pos_start=self.pos), None\n        else:\n            pos_start = self.pos.copy()\n            return Token('IDENTIFIER', id_str, pos_start, self.pos), IllegalCharacterError(pos_start, self.pos,\n                                                                                           f\"Unknown identifier '{id_str}'\")\n    def make_number(self):\n        num_str = ''\n        dot_count = 0\n        pos_start = self.pos.copy()\n\n        while self.current_char != None and self.current_char in DIGITS + '.':\n            if self.current_char == '.':\n                if dot_count == 1: break\n                dot_count += 1\n                num_str += '.'\n            else:\n                num_str += self.current_char\n            self.advance()\n\n        if dot_count == 0:\n            return Token(TT_INT, int(num_str), pos_start, self.pos)\n        else:\n            return Token(TT_FLOAT, float(num_str), pos_start, self.pos)\n\n    def make_string(self):\n        pos_start = self.pos.copy()\n        self.advance()  # Skip opening quote\n        str_value = ''\n        while self.current_char is not None and self.current_char != '\"':\n            if self.current_char == '\\\\':\n                self.advance()\n                if self.current_char == '\"':\n                    str_value += '\"'\n                elif self.current_char == '\\\\':\n                    str_value += '\\\\'\n                else:\n                    str_value += '\\\\' + self.current_char\n            else:\n                str_value += self.current_char\n            self.advance()\n        self.advance()  # Skip closing quote\n        return Token('STRING', str_value, pos_start, self.pos)\n\n###############\n# NODES\n###############\nclass NumberNode:\n    def __init__(self, tok):\n        self.tok = tok\n\n        self.pos_start = self.tok.pos_start\n        self.pos_end = self.tok.pos_end\n\n    def __repr__(self):\n        return f'{self.tok}'\n\nclass BinOpNode:\n    def __init__(self, left_node, op_tok, right_node):\n        self.left_node = left_node\n        self.op_tok = op_tok\n        self.right_node = right_node\n\n        self.pos_start = self.left_node.pos_start\n        self.pos_end = self.right_node.pos_end\n\n    def __repr__(self):\n        return f'({self.left_node} {self.op_tok} {self.right_node})'\n\n\nclass BoolOpNode:\n    def __init__(self, left_node, op_tok, right_node):\n        self.left_node = left_node\n        self.op_tok = op_tok\n        self.right_node = right_node\n\n    def __repr__(self):\n        return f'({self.left_node} {self.op_tok} {self.right_node})'\n\nclass BoolNode:\n    def __init__(self, tok):\n        self.tok = tok\n\n    def __repr__(self):\n        return f'({self.tok})'\n\nclass UnaryOpNode:\n    def __init__(self, op_tok, node):\n        self.op_tok = op_tok\n        self.node = node\n        self.pos_start = self.op_tok.pos_start\n        self.pos_end = self.node.pos_end\n\n    def __repr__(self):\n        return f'({self.op_tok} {self.node})'\n\nclass ComparisonNode:\n    def __init__(self, left_node, op_tok, right_node):\n        self.left_node = left_node\n        self.op_tok = op_tok\n        self.right_node = right_node\n\n    def __repr__(self):\n        return f'({self.left_node} {self.op_tok} {self.right_node})'\n\n#######################################\n# PARSE RESULT\n#######################################\n\nclass ParseResult:\n    def __init__(self):\n        self.error = None\n        self.node = None\n\n    def register(self, res):\n        if isinstance(res, ParseResult):\n            if res.error: self.error = res.error\n            return res.node\n\n        return res\n\n    def success(self, node):\n        self.node = node\n        return self\n\n    def failure(self, error):\n        self.error = error\n        return self\n\n###############\n# PARSER\n###############\nclass Parser:\n    def __init__(self, tokens):\n        self.tokens = tokens\n        self.tok_idx = -1\n        self.advance()\n\n    def advance(self):\n        self.tok_idx += 1\n        if self.tok_idx < len(self.tokens):\n            self.current_tok = self.tokens[self.tok_idx]\n        return self.current_tok\n\n    def parse(self):\n        res = self.expr()\n        if not res.error and self.current_tok.type != TT_EOF:\n            return res.failure(InvalidSyntaxError(\n                self.current_tok.pos_start, self.current_tok.pos_end,\n                \"Expected '+', '-', '*' or '/'\"\n            ))\n        return res\n\n\n    ###################################\n\n\n    def factor(self):\n        res = ParseResult()\n        tok = self.current_tok\n\n        if tok.type == TT_NOT:\n            res.register(self.advance())\n            factor = res.register(self.factor())\n            if res.error: return res\n            return res.success(UnaryOpNode(tok, factor))\n\n        if tok.type in (TT_PLUS, TT_MINUS):\n            res.register(self.advance())\n            factor = res.register(self.factor())\n            if res.error: return res\n            return res.success(UnaryOpNode(tok, factor))\n\n        elif tok.type in (TT_INT, TT_FLOAT):\n            res.register(self.advance())\n            return res.success(NumberNode(tok))\n\n        elif tok.type == TT_TRUE or tok.type == TT_FALSE:\n            res.register(self.advance())\n            return res.success(BoolNode(tok))\n\n        elif tok.type == TT_LPAREN:\n            res.register(self.advance())\n            expr = res.register(self.expr())\n            if res.error: return res\n            if self.current_tok.type == TT_RPAREN:\n                res.register(self.advance())\n                return res.success(expr)\n            else:\n                return res.failure(InvalidSyntaxError(\n                    self.current_tok.pos_start, self.current_tok.pos_end,\n                    \"Expected ')'\"\n                ))\n\n        return res.failure(InvalidSyntaxError(\n            tok.pos_start, tok.pos_end,\n            \"Expected int or float or boolean\"\n        ))\n\n    def term(self):\n        return self.bin_op(self.factor, (TT_MUL, TT_DIV, TT_MODULO))\n\n\n    def expr(self):\n\n        res = ParseResult()\n        left = res.register(self.bin_op(self.term, (TT_PLUS, TT_MINUS)))\n        if res.error: return res\n\n        while self.current_tok.type in (TT_AND, TT_OR):\n                op_tok = self.current_tok\n                res.register(self.advance())\n                right = res.register(self.bin_op(self.term, (TT_AND, TT_OR, TT_NOT)))\n                if res.error: return res\n                left = BinOpNode(left, op_tok, right)\n\n        # Add the comparison logic here\n        while self.current_tok.type in (TT_EQ, TT_NEQ, TT_LT, TT_GT, TT_LTE, TT_GTE):\n                op_tok = self.current_tok\n                res.register(self.advance())\n                right = res.register(self.comparison())\n                if res.error: return res\n                left = BinOpNode(left, op_tok, right)\n\n        return res.success(left)\n\n    def comparison(self):\n        res = ParseResult()\n        left = res.register(self.expr())\n        if res.error: return res\n\n        if isinstance(left, BoolNode):\n            return res.failure(InvalidSyntaxError(\n                left.tok.pos_start, left.tok.pos_end,\n                \"Cannot compare boolean with integer\"\n            ))\n\n        while self.current_tok.type in (TT_EQ, TT_NEQ, TT_LT, TT_GT, TT_LTE, TT_GTE):\n            op_tok = self.current_tok\n            res.register(self.advance())\n            right = res.register(self.expr())\n            if res.error: return res\n\n            if isinstance(right, BoolNode):\n                return res.failure(InvalidSyntaxError(\n                    right.tok.pos_start, right.tok.pos_end,\n                    \"Cannot compare boolean with integer\"\n                ))\n\n            left = ComparisonNode(left, op_tok, right)\n\n        return res.success(left)\n\n###################################\n\n    def bin_op(self, func, ops):\n        res = ParseResult()\n        left = res.register(func())\n        if res.error: return res\n\n        while self.current_tok.type in ops:\n            op_tok = self.current_tok\n            res.register(self.advance())\n            right = res.register(func())\n            if res.error: return res\n            left = BinOpNode(left, op_tok, right)\n\n        return res.success(left)\n\n#######################################\n# RUNTIME RESULT\n#######################################\n\nclass RTResult:\n    def __init__(self):\n        self.value = None\n        self.error = None\n\n    def register(self, res):\n        if res.error: self.error = res.error\n        return res.value\n\n    def success(self, value):\n        self.value = value\n        return self\n\n    def failure(self, error):\n        self.error = error\n        return self\n\n\n#######################################\n# VALUES\n#######################################\n\nclass Number:\n    def __init__(self, value):\n        self.value = value\n        self.set_pos()\n        self.set_context()\n\n    def set_pos(self, pos_start=None, pos_end=None):\n        self.pos_start = pos_start\n        self.pos_end = pos_end\n        return self\n\n    def set_context(self, context=None):\n        self.context = context\n        return self\n\n    def added_to(self, other):\n        if isinstance(other, Number):\n            return Number(self.value + other.value).set_context(self.context), None\n\n    def subbed_by(self, other):\n        if isinstance(other, Number):\n            return Number(self.value - other.value).set_context(self.context), None\n\n    def multed_by(self, other):\n        if isinstance(other, Number):\n            return Number(self.value * other.value).set_context(self.context), None\n\n    def dived_by(self, other):\n        if isinstance(other, Number):\n            if other.value == 0:\n                return None, RTError(\n                    other.pos_start, other.pos_end,\n                    'Division by zero',\n                    self.context\n                )\n\n            return Number(self.value / other.value).set_context(self.context), None\n\n    def __repr__(self):\n        return str(self.value)\n\n#######################################\n# CONTEXT\n#######################################\n\nclass Context:\n    def __init__(self, display_name, parent=None, parent_entry_pos=None):\n        self.display_name = display_name\n        self.parent = parent\n        self.parent_entry_pos = parent_entry_pos\n\n\n###############\n# INTERPRETER\n###############\nclass Interpreter:\n    def visit(self, node, context):\n        method_name = f'visit_{type(node).__name__}'\n        method = getattr(self, method_name, self.no_visit_method)\n        return method(node, context)\n\n    def no_visit_method(self, node, context):\n        raise Exception(f'No visit_{type(node).__name__} method defined')\n\n    ###################################\n\n    def visit_NumberNode(self, node, context):\n        return RTResult().success(\n            Number(node.tok.value).set_context(context).set_pos(node.pos_start, node.pos_end)\n        )\n\n    def visit_BinOpNode(self, node, context):\n        res = RTResult()\n        left = res.register(self.visit(node.left_node, context))\n        if res.error: return res\n        right = res.register(self.visit(node.right_node, context))\n        if res.error: return res\n\n        if node.op_tok.type == TT_PLUS:\n            result, error = left.added_to(right)\n        elif node.op_tok.type == TT_MINUS:\n            result, error = left.subbed_by(right)\n        elif node.op_tok.type == TT_MUL:\n            result, error = left.multed_by(right)\n        elif node.op_tok.type == TT_DIV:\n            result, error = left.dived_by(right)\n\n        if error:\n            return res.failure(error)\n        else:\n            return res.success(result.set_pos(node.pos_start, node.pos_end))\n\n    def visit_UnaryOpNode(self, node, context):\n        res = RTResult()\n        number = res.register(self.visit(node.node, context))\n        if res.error: return res\n\n        error = None\n\n        if node.op_tok.type == TT_MINUS:\n            number, error = number.multed_by(Number(-1))\n\n        if error:\n            return res.failure(error)\n        else:\n            return res.success(number.set_pos(node.pos_start, node.pos_end))\n\n###############\n# RUN\n###############\n\n\ndef run(fn, text):\n    # Generate tokens\n    lexer = Lexer(fn, text)\n    tokens, error = lexer.make_token()\n    if error: return None, error\n\n    # Generate AST\n    parser = Parser(tokens)\n    ast = parser.parse()\n    if ast.error: return None, ast.error\n\n    # Run program\n    interpreter = Interpreter()\n    context = Context('<program>')\n    result = interpreter.visit(ast.node, context)\n\n    return result.value, result.error
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/basic.py b/basic.py
--- a/basic.py	(revision 381fd47eee32aac87b9c8fdbf0e31d4047faac51)
+++ b/basic.py	(date 1724237597584)
@@ -28,6 +28,10 @@
     def __init__(self, pos_start, pos_end, details):
         super().__init__(pos_start, pos_end, 'Illegal Character', details)
 
+class ExpectedCharError(Error):
+    def __init__(self, pos_start, pos_end, details):
+        super().__init__(pos_start, pos_end, 'Expected Character', details)
+
 class InvalidSyntaxError(Error):
         def __init__(self, pos_start, pos_end, details=''):
                 super().__init__(pos_start, pos_end, 'Invalid Syntax', details)
@@ -199,18 +203,8 @@
                 self.advance()
                 self.skip_comment()
             elif self.current_char == '/':
+                tokens.append(Token(TT_DIV, pos_start=self.pos))
                 self.advance()
-                if self.current_char == '/':
-                    self.advance()
-                    self.skip_comment()
-                elif self.current_char == '*':
-                    self.advance()
-                    result, error = self.handle_multiline_comment()
-                    if error:
-                        return [], error
-                    tokens.extend(result)
-                else:
-                    tokens.append(Token(TT_DIV, pos_start=self.pos))
             elif self.current_char == '"':
                 tokens.append(self.make_string())
             elif self.current_char.isalpha() or self.current_char == '_':
@@ -319,6 +313,7 @@
         tokens.append(Token(TT_EOF, pos_start=self.pos))
         return tokens, None
 
+
     def make_identifier(self):
         id_str = ''
         while self.current_char is not None and (self.current_char.isalnum() or self.current_char == '_'):
@@ -329,9 +324,9 @@
             return Token(TT_TRUE,pos_start=self.pos), None
         elif id_str.lower() == 'false':
             return Token(TT_FALSE,pos_start=self.pos), None
-        elif id_str == 'def':
+        elif id_str.lower() == 'def':
             return Token(TT_DEF,pos_start=self.pos), None
-        elif id_str == 'lambda':
+        elif id_str.lower() == 'lambda':
             return Token(TT_LAMBDA,pos_start=self.pos), None
         else:
             pos_start = self.pos.copy()
@@ -342,7 +337,7 @@
         dot_count = 0
         pos_start = self.pos.copy()
 
-        while self.current_char != None and self.current_char in DIGITS + '.':
+        while self.current_char is not None and self.current_char in DIGITS + '.':
             if self.current_char == '.':
                 if dot_count == 1: break
                 dot_count += 1
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"7754e707-8f73-4d26-b6ac-ab109b5ff796\" name=\"Changes\" comment=\"started interpreter but it doesn't work at this point because of the position error\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/basic.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/basic.py\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;ArinaKuprina1&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/ArinaKuprina1/Programm_Languages_Project1.0.git&quot;,\n    &quot;accountId&quot;: &quot;2dbaa8e8-30fb-4026-8feb-48dfe07c3913&quot;\n  }\n}</component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 1\n}</component>\n  <component name=\"ProjectId\" id=\"2ksTI3AzAApvZeopQYswQZShMuq\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"Python.basic.executor\": \"Run\",\n    \"Python.shell.executor\": \"Run\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"git-widget-placeholder\": \"main\",\n    \"last_opened_file_path\": \"/Users/arinakuprina/PycharmProjects/Programm_Languages_Project1.0\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"settings.editor.selected.configurable\": \"org.jetbrains.plugins.github.ui.GithubSettingsConfigurable\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-d6986cc7102b-410509235cf1-JavaScript-PY-242.20224.347\" />\n        <option value=\"bundled-python-sdk-c2d6afa66fbe-39cff9de6eef-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-242.20224.347\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"7754e707-8f73-4d26-b6ac-ab109b5ff796\" name=\"Changes\" comment=\"\" />\n      <created>1724071201196</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1724071201196</updated>\n      <workItem from=\"1724081996446\" duration=\"19597000\" />\n      <workItem from=\"1724164237316\" duration=\"13647000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"changed lexer, and shell file\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1724089944986</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1724089944987</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"started parser\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1724092536952</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1724092536952</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"started parser\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1724094248469</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1724094248469</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"started parser\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1724096567359</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1724096567359</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"changes to parser\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1724097250035</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1724097250035</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"changes to parser\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1724101559067</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1724101559067</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"parser identifies bool, int ,comparison operations,arithmetic operations , bool operations\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1724104189674</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1724104189675</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"parser identifies bool, int ,comparison operations,arithmetic operations , bool operations\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1724105108831</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1724105108831</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"parser identifies bool, int ,comparison operations,arithmetic operations , bool operations\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1724105717971</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1724105717971</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"parser identifies bool, int ,comparison operations,arithmetic operations , bool operations\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1724175131893</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1724175131893</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"started interpreter but it doesn't work at this point because of the position error\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1724177572125</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1724177572125</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"12\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"changed lexer, and shell file\" />\n    <MESSAGE value=\"started parser\" />\n    <MESSAGE value=\"changes to parser\" />\n    <MESSAGE value=\"parser identifies bool, int ,comparison operations,arithmetic operations , bool operations\" />\n    <MESSAGE value=\"started interpreter but it doesn't work at this point because of the position error\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"started interpreter but it doesn't work at this point because of the position error\" />\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/Programm_Languages_Project1_0$basic.coverage\" NAME=\"basic Coverage Results\" MODIFIED=\"1724176067799\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/Programm_Languages_Project1_0$shell.coverage\" NAME=\"shell Coverage Results\" MODIFIED=\"1724178305162\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 381fd47eee32aac87b9c8fdbf0e31d4047faac51)
+++ b/.idea/workspace.xml	(date 1724244688070)
@@ -4,7 +4,8 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="7754e707-8f73-4d26-b6ac-ab109b5ff796" name="Changes" comment="started interpreter but it doesn't work at this point because of the position error">
+    <list default="true" id="7754e707-8f73-4d26-b6ac-ab109b5ff796" name="Changes" comment="started interpreter, works partly">
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/basic.py" beforeDir="false" afterPath="$PROJECT_DIR$/basic.py" afterDir="false" />
     </list>
@@ -44,24 +45,24 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "ASKED_SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "Python.basic.executor": "Run",
-    "Python.shell.executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "main",
-    "last_opened_file_path": "/Users/arinakuprina/PycharmProjects/Programm_Languages_Project1.0",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "settings.editor.selected.configurable": "org.jetbrains.plugins.github.ui.GithubSettingsConfigurable",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;Python.basic.executor&quot;: &quot;Run&quot;,
+    &quot;Python.shell.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;last_opened_file_path&quot;: &quot;/Users/arinakuprina/PycharmProjects/Programm_Languages_Project1.0&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;org.jetbrains.plugins.github.ui.GithubSettingsConfigurable&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
@@ -80,6 +81,7 @@
       <updated>1724071201196</updated>
       <workItem from="1724081996446" duration="19597000" />
       <workItem from="1724164237316" duration="13647000" />
+      <workItem from="1724234923430" duration="3805000" />
     </task>
     <task id="LOCAL-00001" summary="changed lexer, and shell file">
       <option name="closed" value="true" />
@@ -185,6 +187,6 @@
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/Programm_Languages_Project1_0$basic.coverage" NAME="basic Coverage Results" MODIFIED="1724176067799" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Programm_Languages_Project1_0$shell.coverage" NAME="shell Coverage Results" MODIFIED="1724178305162" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Programm_Languages_Project1_0$shell.coverage" NAME="shell Coverage Results" MODIFIED="1724237626441" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"Black\">\n    <option name=\"sdkName\" value=\"Python 3.9\" />\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.12\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 381fd47eee32aac87b9c8fdbf0e31d4047faac51)
+++ b/.idea/misc.xml	(date 1724193993953)
@@ -3,5 +3,5 @@
   <component name="Black">
     <option name="sdkName" value="Python 3.9" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
